---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
---

<Layout title="Mediterranean Power Plan - Progress">
  <Navigation />
  
  <main class="max-w-6xl mx-auto px-4 py-8">
    <!-- Header -->
    <header class="text-center mb-8">
      <div class="bg-gradient-to-r from-emerald-600 to-emerald-700 text-white rounded-xl p-8 shadow-lg">
        <h1 class="text-4xl font-bold mb-2">Your Progress</h1>
        <p class="text-xl opacity-90 font-sans">Mediterranean Health Journey Tracking</p>
      </div>
    </header>

    <!-- Progress Chart -->
    <section class="bg-white rounded-xl shadow-md p-6 mb-8">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-emerald-700">📊 Daily Progress Chart</h2>
        <div class="text-xs text-gray-500">
          Track your daily habits over time
        </div>
      </div>
      
      <!-- Chart Container -->
      <div class="relative" style="height: 400px;">
        <canvas id="progressChart"></canvas>
      </div>
      
      <!-- Summary Stats -->
      <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6 pt-6 border-t border-gray-200">
        <div class="text-center">
          <div class="text-2xl font-bold text-emerald-600" id="total-days">0</div>
          <div class="text-sm text-gray-600">Days Tracked</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-amber-600" id="meals-percentage">0%</div>
          <div class="text-sm text-gray-600">Meals Complete</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-red-600" id="exercise-percentage">0%</div>
          <div class="text-sm text-gray-600">Exercise Rate</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-blue-600" id="water-average">0</div>
          <div class="text-sm text-gray-600">Avg Water/Day</div>
        </div>
      </div>
    </section>
    
    <!-- Weight Progress Chart -->
    <section class="bg-white rounded-xl shadow-md p-6 mb-8">
      <h2 class="text-2xl font-bold text-teal-700 mb-6 flex items-center justify-between">
        <span>⚖️ Weight Progress</span>
      </h2>
      
      <!-- Weight Chart Container -->
      <div class="relative" style="height: 300px;">
        <canvas id="weightChart"></canvas>
      </div>
      
      <!-- Weight Stats -->
      <div class="grid grid-cols-3 gap-4 mt-6 pt-6 border-t border-gray-200">
        <div class="text-center">
          <div class="text-2xl font-bold text-teal-600" id="current-weight">--</div>
          <div class="text-sm text-gray-600">Current Weight</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-teal-600" id="weight-change">--</div>
          <div class="text-sm text-gray-600">Total Change</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-teal-600" id="weight-entries">0</div>
          <div class="text-sm text-gray-600">Entries</div>
        </div>
      </div>
    </section>
    
    <!-- Recent Activity -->
    <section class="bg-white rounded-xl shadow-md p-6 mb-8">
      <h2 class="text-2xl font-bold text-emerald-700 mb-6">Recent Activity</h2>
      <div id="recent-activity" class="space-y-3">
        <!-- Activity items will be populated by JavaScript -->
      </div>
    </section>

    <!-- Export & Actions -->
    <section class="text-center">
      <button onclick="exportToCSV()" class="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-medium mr-4">
        📄 Export to CSV
      </button>
      <button onclick="clearAllData()" class="bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-lg font-medium">
        🗑️ Clear All Data
      </button>
      <div class="mt-4">
        <a href="/today" class="text-emerald-600 hover:text-emerald-700 font-medium">← Back to Today's Plan</a>
      </div>
    </section>

    <!-- Sync Status Section -->
    <section class="mt-8 bg-slate-50 rounded-xl p-6 border border-slate-200">
      <h2 class="text-2xl font-bold text-slate-700 mb-6">☁️ Cloud Sync Status</h2>
      <p class="text-gray-600 mb-4">Your data is automatically saved locally and synced to the cloud when available.</p>
      
      <div class="flex items-center gap-4">
        <div id="sync-status-indicator" class="flex items-center gap-2">
          <div class="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
          <span class="text-sm text-gray-600">Local storage active</span>
        </div>
        <button onclick="checkSyncStatus()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium text-sm">
          🔄 Check Sync Status
        </button>
      </div>
      
      <div id="sync-status-message" class="text-sm mt-4"></div>
    </section>
  </main>

  <!-- Load Chart.js first -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  
  <script>
    import { SimpleUnifiedTracker } from '../utils/simpleUnifiedTracker';

    let tracker = null;

    document.addEventListener('DOMContentLoaded', async () => {
      tracker = new SimpleUnifiedTracker();
      // Allow time for cloud sync to complete
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Wait for Chart.js to load
      let chartLoadAttempts = 0;
      while (typeof Chart === 'undefined' && chartLoadAttempts < 20) {
        await new Promise(resolve => setTimeout(resolve, 100));
        chartLoadAttempts++;
      }
      
      if (typeof Chart === 'undefined') {
        console.error('Chart.js failed to load');
        const canvas = document.getElementById('progressChart');
        if (canvas && canvas.parentElement) {
          canvas.parentElement.innerHTML = '<p class="text-center text-red-500 py-8">Failed to load chart library. Please refresh the page.</p>';
        }
        return;
      }
      
      loadProgressData();
    });

    function loadProgressData() {
      if (!tracker) return;

      const summary = tracker.getSummary();
      const allData = tracker.getAllTrackingData();
      
      // Update summary stats
      document.getElementById('total-days').textContent = summary.totalDays.toString();
      
      // Calculate meal completion rate
      const totalMeals = summary.totalDays * 3; // 3 meals per day
      const completedMeals = summary.breakfastCompleted + summary.lunchCompleted + summary.dinnerCompleted;
      const mealPercentage = totalMeals > 0 ? Math.round((completedMeals / totalMeals) * 100) : 0;
      document.getElementById('meals-percentage').textContent = `${mealPercentage}%`;
      
      // Exercise completion rate
      const exercisePercentage = summary.totalDays > 0 ? Math.round((summary.exerciseCompleted / summary.totalDays) * 100) : 0;
      document.getElementById('exercise-percentage').textContent = `${exercisePercentage}%`;
      
      // Water average
      document.getElementById('water-average').textContent = summary.averageWater.toString();

      // Generate progress chart
      generateProgressChart(allData);
      
      // Generate weight chart
      generateWeightChart(allData);
      
      // Load recent activity
      loadRecentActivity(allData);
    }
    
    let chart = null;
    
    function generateProgressChart(allData) {
      let canvas = document.getElementById('progressChart');
      if (!canvas) {
        console.error('Canvas element not found');
        return;
      }
      
      // Convert data to array and sort by date
      const sortedEntries = Object.values(allData)
        .sort((a, b) => a.date.localeCompare(b.date))
        .slice(-7); // Show last 7 days only
      
      if (sortedEntries.length === 0) {
        const container = canvas.parentElement;
        if (container) {
          container.innerHTML = '<p class="text-center text-gray-500 py-8">No tracking data yet. Start tracking to see your progress chart!</p>';
        }
        return;
      }
      
      // Prepare data for Chart.js
      const labels = sortedEntries.map(entry => {
        const date = new Date(entry.date);
        const dateLabel = date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        
        // Check if all metrics are at 100% for this day
        const mealsCompleted = (entry.breakfast ? 1 : 0) + (entry.lunch ? 1 : 0) + (entry.dinner ? 1 : 0);
        const mealsPercent = (mealsCompleted / 3) * 100;
        const exercisePercent = entry.exercise ? 100 : 0;
        const waterPercent = Math.min((entry.waterGlasses / 8) * 100, 100);
        const alcoholFreePercent = entry.alcoholFree ? 100 : 0;
        
        const isPerfectDay = mealsPercent === 100 && 
                           exercisePercent === 100 && 
                           waterPercent === 100 && 
                           alcoholFreePercent === 100;
        
        return isPerfectDay ? `⭐ ${dateLabel}` : dateLabel;
      });
      
      const datasets = [
        {
          label: 'Meals Completed (%)',
          data: sortedEntries.map(entry => {
            const mealsCompleted = (entry.breakfast ? 1 : 0) + (entry.lunch ? 1 : 0) + (entry.dinner ? 1 : 0);
            return Math.round((mealsCompleted / 3) * 100);
          }),
          borderColor: 'rgb(245, 158, 11)',
          backgroundColor: 'rgba(245, 158, 11, 0.1)',
          tension: 0.1
        },
        {
          label: 'Exercise',
          data: sortedEntries.map(entry => entry.exercise ? 100 : 0),
          borderColor: 'rgb(239, 68, 68)',
          backgroundColor: 'rgba(239, 68, 68, 0.1)',
          tension: 0.1
        },
        {
          label: 'Water Intake (%)',
          data: sortedEntries.map(entry => Math.min(Math.round((entry.waterGlasses / 8) * 100), 100)),
          borderColor: 'rgb(59, 130, 246)',
          backgroundColor: 'rgba(59, 130, 246, 0.1)',
          tension: 0.1
        },
        {
          label: 'Alcohol Free',
          data: sortedEntries.map(entry => entry.alcoholFree ? 100 : 0),
          borderColor: 'rgb(147, 51, 234)',
          backgroundColor: 'rgba(147, 51, 234, 0.1)',
          tension: 0.1
        }
      ];
      
      // Destroy existing chart if it exists
      if (chart) {
        chart.destroy();
      }
      
      // Create new chart
      const ctx = canvas.getContext('2d');
      chart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: datasets
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          interaction: {
            mode: 'index',
            intersect: false,
          },
          plugins: {
            title: {
              display: false
            },
            legend: {
              display: true,
              position: 'bottom',
              labels: {
                usePointStyle: true,
                padding: 15,
                font: {
                  size: 12
                }
              }
            },
            tooltip: {
              mode: 'index',
              intersect: false,
              callbacks: {
                afterLabel: function(context) {
                  const index = context.dataIndex;
                  const entry = sortedEntries[index];
                  const details = [];
                  
                  if (context.dataset.label === 'Meals Completed (%)') {
                    details.push(`Breakfast: ${entry.breakfast ? '✓' : '✗'}`);
                    details.push(`Lunch: ${entry.lunch ? '✓' : '✗'}`);
                    details.push(`Dinner: ${entry.dinner ? '✓' : '✗'}`);
                  } else if (context.dataset.label === 'Water Intake (%)') {
                    details.push(`${entry.waterGlasses} glasses`);
                  }
                  
                  return details;
                }
              }
            }
          },
          scales: {
            x: {
              display: true,
              title: {
                display: true,
                text: 'Date'
              }
            },
            y: {
              display: true,
              title: {
                display: true,
                text: 'Completion (%)'
              },
              min: 0,
              max: 100,
              ticks: {
                stepSize: 25,
                callback: function(value) {
                  return value + '%';
                }
              }
            }
          }
        }
      });
    }

    let weightChart = null;
    
    function generateWeightChart(allData) {
      let canvas = document.getElementById('weightChart');
      if (!canvas) {
        console.error('Weight chart canvas element not found');
        return;
      }
      
      // Filter entries with weight data and sort by date
      const weightEntries = Object.values(allData)
        .filter(entry => entry.weight && entry.weight > 0)
        .sort((a, b) => a.date.localeCompare(b.date));
      
      if (weightEntries.length === 0) {
        const container = canvas.parentElement;
        if (container) {
          container.innerHTML = '<p class="text-center text-gray-500 py-8">No weight data yet. Start tracking your weight to see progress!</p>';
        }
        // Update stats
        document.getElementById('current-weight').textContent = '--';
        document.getElementById('weight-change').textContent = '--';
        document.getElementById('weight-entries').textContent = '0';
        return;
      }
      
      // Calculate stats
      const currentWeight = weightEntries[weightEntries.length - 1].weight;
      const startWeight = weightEntries[0].weight;
      const weightChange = currentWeight - startWeight;
      
      document.getElementById('current-weight').textContent = currentWeight.toFixed(1) + ' lbs';
      document.getElementById('weight-change').textContent = (weightChange >= 0 ? '+' : '') + weightChange.toFixed(1) + ' lbs';
      document.getElementById('weight-entries').textContent = weightEntries.length.toString();
      
      // Prepare chart data
      const labels = weightEntries.map(entry => {
        const date = new Date(entry.date);
        return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
      });
      
      // Destroy existing chart if it exists
      if (weightChart) {
        weightChart.destroy();
      }
      
      // Create new chart
      const ctx = canvas.getContext('2d');
      weightChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: 'Weight (lbs)',
            data: weightEntries.map(entry => entry.weight),
            borderColor: 'rgb(20, 184, 166)',
            backgroundColor: 'rgba(20, 184, 166, 0.1)',
            tension: 0.1,
            borderWidth: 3,
            pointRadius: 5,
            pointHoverRadius: 7,
            fill: true
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          interaction: {
            mode: 'index',
            intersect: false,
          },
          plugins: {
            title: {
              display: false
            },
            legend: {
              display: false
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  return context.parsed.y.toFixed(1) + ' lbs';
                }
              }
            }
          },
          scales: {
            x: {
              display: true,
              title: {
                display: true,
                text: 'Date'
              }
            },
            y: {
              display: true,
              title: {
                display: true,
                text: 'Weight (lbs)'
              },
              ticks: {
                callback: function(value) {
                  return value.toFixed(1);
                }
              }
            }
          }
        }
      });
    }

    function loadRecentActivity(allData) {
      const container = document.getElementById('recent-activity');
      if (!container) return;

      const entries = Object.values(allData)
        .sort((a, b) => b.date.localeCompare(a.date))
        .slice(0, 7); // Show last 7 days

      if (entries.length === 0) {
        container.innerHTML = '<p class="text-slate-500 text-center">No tracking data yet. Start using the app to see your progress!</p>';
        return;
      }

      container.innerHTML = entries.map(entry => {
        const date = new Date(entry.date).toLocaleDateString('en-US', { 
          weekday: 'short', 
          month: 'short', 
          day: 'numeric' 
        });
        
        const completedItems = [];
        if (entry.breakfast) completedItems.push('🍳 Breakfast');
        if (entry.lunch) completedItems.push('🥗 Lunch');
        if (entry.dinner) completedItems.push('🍽️ Dinner');
        if (entry.exercise) completedItems.push('💪 Exercise');
        if (entry.waterGlasses > 0) completedItems.push(`💧 ${entry.waterGlasses} glasses`);
        if (entry.alcoholFree) completedItems.push('🎉 Alcohol Free');
        if (entry.notes && entry.notes.trim() && !entry.notes.includes('Mediterranean Diet Day')) completedItems.push('📝 Notes');

        return `
          <div class="flex justify-between items-center p-4 bg-slate-50 rounded-lg">
            <div>
              <div class="font-semibold text-slate-700">${date}</div>
              <div class="text-sm text-slate-600">
                ${completedItems.length > 0 ? completedItems.join(', ') : 'No activities completed'}
              </div>
            </div>
            <div class="text-emerald-600 font-medium">
              ${completedItems.length}/7 completed
            </div>
          </div>
        `;
      }).join('');
    }

    function exportToCSV() {
      if (!tracker) {
        alert('Tracker not initialized. Please refresh the page.');
        return;
      }

      const csvContent = tracker.exportToCSV();
      const blob = new Blob([csvContent], { type: 'text/csv' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.style.display = 'none';
      a.href = url;
      a.download = `mediterranean-diet-tracking-${new Date().toISOString().split('T')[0]}.csv`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      alert('CSV file downloaded! You can now import this into your preferred spreadsheet application.');
    }

    function clearAllData() {
      if (confirm('Are you sure you want to clear all tracking data? This cannot be undone.')) {
        localStorage.removeItem('mediterranean-health-tracking');
        localStorage.removeItem('waterCount');
        alert('All data cleared!');
        location.reload();
      }
    }

    // Sync Status Functions
    function checkSyncStatus() {
      if (!tracker) {
        showSyncStatus('Tracker not initialized', 'error');
        return;
      }
      
      const syncStatus = tracker.getSyncStatus();
      const statusMessage = document.getElementById('sync-status-message');
      const statusIndicator = document.getElementById('sync-status-indicator');
      
      if (syncStatus.isConfigured) {
        if (syncStatus.status === 'syncing') {
          showSyncStatus('🔄 Syncing with cloud...', 'info');
        } else if (syncStatus.error) {
          showSyncStatus(`⚠️ Cloud sync unavailable: ${syncStatus.error}`, 'warning');
        } else {
          showSyncStatus('✅ Cloud sync is active', 'success');
          // Try to sync now
          tracker.forceSyncNow().then(success => {
            if (success) {
              showSyncStatus('✅ Successfully synced with cloud', 'success');
            }
          });
        }
      } else {
        showSyncStatus('ℹ️ Cloud sync not configured - data saved locally only', 'info');
      }
    }
    
    function showSyncStatus(message, type) {
      const statusMessage = document.getElementById('sync-status-message');
      const colors = {
        info: 'text-blue-600',
        success: 'text-green-600',
        warning: 'text-amber-600',
        error: 'text-red-600'
      };
      if (statusMessage) {
        statusMessage.className = `text-sm mt-4 ${colors[type] || 'text-gray-600'}`;
        statusMessage.textContent = message;
      }
    }

    // Make functions available globally
    window.exportToCSV = exportToCSV;
    window.clearAllData = clearAllData;
    window.checkSyncStatus = checkSyncStatus;
  </script>
</Layout>