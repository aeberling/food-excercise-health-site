---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import { getTodaysPlan, getCurrentWeek } from '../data/dailyPlans';
import { getTodaysQuote } from '../data/quotes';

const todaysPlan = getTodaysPlan();
const currentWeek = getCurrentWeek();
const todaysQuote = getTodaysQuote();
---

<Layout title="Mediterranean Power Plan - Today's Plan">
  <Navigation />
  
  <main class="max-w-6xl mx-auto px-4 py-8">
    <!-- Header with Date and Quote -->
    <header class="text-center mb-8">
      <div class="bg-gradient-to-r from-emerald-600 to-emerald-700 text-white rounded-xl p-8 shadow-lg mb-6">
        <h1 class="text-4xl font-bold mb-2">Daily Plan</h1>
        
        <!-- Date Navigation -->
        <div class="flex items-center justify-center gap-3 mb-4">
          <button onclick="changeDate(-1)" class="bg-emerald-500 hover:bg-emerald-400 text-white p-2 rounded-lg transition-colors">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>
          
          <div class="flex items-center gap-2">
            <button onclick="openDatePicker()" class="text-white hover:text-emerald-200 transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
            </button>
            <input type="date" id="date-picker" class="hidden" onchange="onDateChange()" />
            <div id="date-display" class="text-xl font-sans"></div>
          </div>
          
          <button onclick="changeDate(1)" class="bg-emerald-500 hover:bg-emerald-400 text-white p-2 rounded-lg transition-colors">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </div>
        
        <p class="text-lg opacity-80 font-sans mt-2">Week {currentWeek} • {todaysPlan?.day}</p>
      </div>
    </header>

    <!-- Progress Tracking -->
    <section class="mb-8 bg-gradient-to-br from-purple-50 to-pink-50 rounded-2xl p-6 shadow-xl border-2 border-purple-200">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-2xl font-black text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-pink-600">🎯 Daily Progress</h2>
        <div id="save-status" class="text-sm font-semibold text-purple-600">Auto-saving your wins! ✨</div>
      </div>
      
      <!-- Main tracking grid -->
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
        <!-- Meals Section -->
        <div class="bg-gradient-to-br from-orange-400 to-amber-400 rounded-2xl p-4 shadow-lg transform hover:scale-105 transition-all duration-300">
          <h3 class="font-black text-white text-lg mb-3">🍽️ Meals</h3>
          <div class="space-y-2">
            <label class="duo-checkbox-container">
              <input type="checkbox" id="breakfast-check" class="duo-checkbox" data-meal="breakfast" />
              <span class="duo-checkbox-visual">
                <span class="duo-checkbox-icon">🌅</span>
              </span>
              <span class="duo-checkbox-label">Breakfast</span>
            </label>
            <label class="duo-checkbox-container">
              <input type="checkbox" id="lunch-check" class="duo-checkbox" data-meal="lunch" />
              <span class="duo-checkbox-visual">
                <span class="duo-checkbox-icon">☀️</span>
              </span>
              <span class="duo-checkbox-label">Lunch</span>
            </label>
            <label class="duo-checkbox-container">
              <input type="checkbox" id="dinner-check" class="duo-checkbox" data-meal="dinner" />
              <span class="duo-checkbox-visual">
                <span class="duo-checkbox-icon">🌙</span>
              </span>
              <span class="duo-checkbox-label">Dinner</span>
            </label>
          </div>
        </div>
        
        <!-- Exercise Section -->
        <div class="bg-gradient-to-br from-emerald-400 to-teal-400 rounded-2xl p-4 shadow-lg transform hover:scale-105 transition-all duration-300">
          <h3 class="font-black text-white text-lg mb-3">💪 Exercise</h3>
          <label class="duo-checkbox-container">
            <input type="checkbox" id="exercise-check" class="duo-checkbox" data-activity="exercise" />
            <span class="duo-checkbox-visual">
              <span class="duo-checkbox-icon">🏃‍♂️</span>
            </span>
            <span class="duo-checkbox-label">Workout Complete!</span>
          </label>
          <div class="mt-3 bg-white bg-opacity-20 rounded-lg px-2 py-1 text-white text-xs font-bold">
            Crush it! 🔥
          </div>
        </div>
        
        <!-- Hydration Section -->
        <div class="bg-gradient-to-br from-blue-400 to-cyan-400 rounded-2xl p-4 shadow-lg transform hover:scale-105 transition-all duration-300">
          <h3 class="font-black text-white text-lg mb-3">💧 Hydration</h3>
          <div class="text-center relative">
            <div class="text-4xl font-black text-white mb-3">
              <span id="water-count" class="water-count-animated">0</span>
              <span class="text-2xl">/8</span>
            </div>
            <button onclick="addWater()" class="duo-button bg-white text-blue-500 hover:bg-blue-50 font-black py-2 px-4 rounded-full shadow-lg transform active:scale-95 transition-all duration-150 text-sm">
              <span class="text-lg">💧</span> Add Glass
            </button>
            <div class="water-drops" id="water-drops"></div>
          </div>
        </div>
        
        <!-- Alcohol Free Section -->
        <div class="bg-gradient-to-br from-purple-400 to-indigo-400 rounded-2xl p-4 shadow-lg transform hover:scale-105 transition-all duration-300">
          <h3 class="font-black text-white text-lg mb-3">🎉 Alcohol Free</h3>
          <label class="duo-checkbox-container">
            <input type="checkbox" id="alcohol-free-check" class="duo-checkbox" data-activity="alcohol-free" />
            <span class="duo-checkbox-visual">
              <span class="duo-checkbox-icon">🚫</span>
            </span>
            <span class="duo-checkbox-label">Clear Mind Day!</span>
          </label>
          <div class="mt-3 bg-white bg-opacity-20 rounded-lg px-2 py-1 text-white text-xs font-bold">
            Stay strong! 💪
          </div>
        </div>
        
        <!-- Notes Section -->
        <div class="bg-gradient-to-br from-pink-400 to-rose-400 rounded-2xl p-4 shadow-lg transform hover:scale-105 transition-all duration-300 md:col-span-2 lg:col-span-2">
          <h3 class="font-black text-white text-lg mb-3">📝 Daily Reflection</h3>
          <textarea id="daily-notes" class="w-full p-3 bg-white bg-opacity-90 border-2 border-white rounded-xl text-gray-800 font-medium placeholder-gray-500 focus:outline-none focus:ring-4 focus:ring-white focus:ring-opacity-50 transition-all text-sm" rows="2" placeholder="How was your day? What made you smile? 😊"></textarea>
        </div>
      </div>
      
      <!-- Progress Button -->
      <div class="mt-6 text-center">
        <a href="/progress" class="inline-block bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white px-6 py-3 rounded-full font-black text-base shadow-lg transform hover:scale-105 transition-all duration-300">
          📊 View Progress
        </a>
      </div>
      
    </section>
    
    <style>
      /* Duolingo-style checkbox */
      .duo-checkbox-container {
        display: flex;
        align-items: center;
        cursor: pointer;
        padding: 10px;
        border-radius: 12px;
        background: rgba(255, 255, 255, 0.95);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        margin-bottom: 6px;
        border: 2px solid transparent;
        position: relative;
        overflow: hidden;
      }
      
      .duo-checkbox-container:hover {
        background: rgba(255, 255, 255, 1);
        transform: translateX(4px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
      }
      
      .duo-checkbox-container:has(.duo-checkbox:checked) {
        border-color: #10b981;
        background: rgba(236, 253, 245, 1);
      }
      
      .duo-checkbox {
        position: absolute;
        opacity: 0;
        width: 0;
        height: 0;
      }
      
      .duo-checkbox-visual {
        width: 40px;
        height: 40px;
        border: 3px solid rgba(255, 255, 255, 0.8);
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 12px;
        position: relative;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        background: rgba(255, 255, 255, 0.3);
      }
      
      .duo-checkbox-visual::after {
        content: '✓';
        position: absolute;
        font-size: 24px;
        font-weight: 900;
        color: #10b981;
        opacity: 0;
        transform: scale(0) rotate(-180deg);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }
      
      .duo-checkbox-icon {
        font-size: 20px;
        opacity: 0.6;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }
      
      .duo-checkbox:checked ~ .duo-checkbox-visual {
        background: white;
        border-color: white;
        animation: checkBounce 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
      }
      
      .duo-checkbox:checked ~ .duo-checkbox-visual::after {
        opacity: 1;
        transform: scale(1) rotate(0deg);
      }
      
      .duo-checkbox:checked ~ .duo-checkbox-visual .duo-checkbox-icon {
        opacity: 0.3;
        transform: scale(0.8);
      }
      
      .duo-checkbox-label {
        font-weight: 800;
        font-size: 16px;
        color: #1f2937;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
      }
      
      .duo-checkbox:checked ~ .duo-checkbox-label {
        color: #059669;
        opacity: 0.8;
      }
      
      @keyframes checkBounce {
        0% { transform: scale(1); }
        30% { transform: scale(0.9); }
        60% { transform: scale(1.3); }
        100% { transform: scale(1); }
      }
      
      /* Water animation */
      .water-count-animated {
        display: inline-block;
        transition: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
      }
      
      .water-drops {
        position: absolute;
        inset: 0;
        pointer-events: none;
        overflow: hidden;
      }
      
      .water-drop {
        position: absolute;
        font-size: 24px;
        animation: dropFall 1s ease-out forwards;
        pointer-events: none;
      }
      
      @keyframes dropFall {
        0% {
          transform: translateY(0) scale(0);
          opacity: 1;
        }
        50% {
          transform: translateY(-30px) scale(1.2);
        }
        100% {
          transform: translateY(-60px) scale(0);
          opacity: 0;
        }
      }
      
      /* Success ripple effect */
      .success-ripple {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 32px;
        animation: rippleOut 1s ease-out forwards;
        pointer-events: none;
        z-index: 10;
      }
      
      @keyframes rippleOut {
        0% {
          transform: translate(-50%, -50%) scale(0);
          opacity: 1;
        }
        50% {
          transform: translate(-50%, -50%) scale(1.5);
          opacity: 0.8;
        }
        100% {
          transform: translate(-50%, -50%) scale(2.5);
          opacity: 0;
        }
      }
      
      .celebrate-pulse {
        animation: pulseCelebrate 0.6s ease-out;
      }
      
      @keyframes pulseCelebrate {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
      }
      
      .duo-button:active {
        animation: buttonPulse 0.3s ease-out;
      }
      
      @keyframes buttonPulse {
        0% { transform: scale(1); }
        50% { transform: scale(0.95); }
        100% { transform: scale(1); }
      }
      
      /* Responsive adjustments */
      @media (max-width: 768px) {
        .duo-checkbox-container {
          padding: 10px;
        }
        
        .duo-checkbox-visual {
          width: 40px;
          height: 40px;
        }
        
        .duo-checkbox-label {
          font-size: 16px;
        }
      }
    </style>

    {todaysPlan && (
      <div class="grid lg:grid-cols-2 gap-8">
        <!-- Today's Meals -->
        <section class="bg-white rounded-xl shadow-md p-6">
          <h2 class="text-2xl font-bold text-emerald-700 mb-6 flex items-center">
            🍽️ Today's Nutrition Plan
          </h2>
          
          <div class="space-y-4">
            <!-- Breakfast -->
            <div class="meal-item bg-amber-50 rounded-lg p-4 border border-amber-200">
              <div class="flex justify-between items-start mb-2">
                <h3 class="text-lg font-semibold text-amber-800">Breakfast</h3>
                <span class="bg-amber-600 text-white text-sm px-2 py-1 rounded-full">{todaysPlan.breakfast.protein}</span>
              </div>
              {todaysPlan.breakfast.recipeId ? (
                <a href={`/recipes#${todaysPlan.breakfast.recipeId}`} class="text-amber-700 hover:text-amber-800 underline font-medium">
                  {todaysPlan.breakfast.name}
                </a>
              ) : (
                <p class="text-amber-700 font-medium">{todaysPlan.breakfast.name}</p>
              )}
            </div>

            <!-- Lunch -->
            <div class="meal-item bg-emerald-50 rounded-lg p-4 border border-emerald-200">
              <div class="flex justify-between items-start mb-2">
                <h3 class="text-lg font-semibold text-emerald-800">Lunch</h3>
                <span class="bg-emerald-600 text-white text-sm px-2 py-1 rounded-full">{todaysPlan.lunch.protein}</span>
              </div>
              {todaysPlan.lunch.recipeId ? (
                <a href={`/recipes#${todaysPlan.lunch.recipeId}`} class="text-emerald-700 hover:text-emerald-800 underline font-medium">
                  {todaysPlan.lunch.name}
                </a>
              ) : (
                <p class="text-emerald-700 font-medium">{todaysPlan.lunch.name}</p>
              )}
            </div>

            <!-- Dinner -->
            <div class="meal-item bg-blue-50 rounded-lg p-4 border border-blue-200">
              <div class="flex justify-between items-start mb-2">
                <h3 class="text-lg font-semibold text-blue-800">Dinner</h3>
                <span class="bg-blue-600 text-white text-sm px-2 py-1 rounded-full">{todaysPlan.dinner.protein}</span>
              </div>
              {todaysPlan.dinner.recipeId ? (
                <a href={`/recipes#${todaysPlan.dinner.recipeId}`} class="text-blue-700 hover:text-blue-800 underline font-medium">
                  {todaysPlan.dinner.name}
                </a>
              ) : (
                <p class="text-blue-700 font-medium">{todaysPlan.dinner.name}</p>
              )}
            </div>
          </div>

          <!-- Daily Protein Total -->
          <div class="mt-6 bg-slate-50 rounded-lg p-4 border border-slate-200">
            <div class="flex justify-between items-center">
              <span class="text-slate-700 font-semibold">Daily Protein Target:</span>
              <span class="text-2xl font-bold text-emerald-600">{todaysPlan.totalProtein}</span>
            </div>
          </div>
        </section>

        <!-- Today's Exercise -->
        <section class="bg-white rounded-xl shadow-md p-6">
          <h2 class="text-2xl font-bold text-emerald-700 mb-6 flex items-center">
            💪 Today's Training
          </h2>
          
          <div class="exercise-card bg-gradient-to-r from-red-50 to-orange-50 rounded-lg p-6 border border-red-200">
            <div class="flex justify-between items-start mb-4">
              <h3 class="text-xl font-bold text-red-800">{todaysPlan.exercise.name}</h3>
              <div class="text-right">
                <div class="text-sm text-red-600 font-medium">{todaysPlan.exercise.duration}</div>
                <div class="text-xs text-red-500">{todaysPlan.exercise.intensity} Intensity</div>
              </div>
            </div>
            
            <p class="text-red-700 mb-4 font-sans">{todaysPlan.exercise.description}</p>
            
            <div class="flex gap-2">
              <a href="/exercise-plan" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                View Full Workout
              </a>
              <button onclick="toggleTimer()" class="bg-white hover:bg-red-50 text-red-600 border border-red-600 px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                Start Timer
              </button>
            </div>
          </div>

          <!-- Quick Timer (hidden by default) -->
          <div id="workout-timer" class="hidden mt-4 bg-slate-50 rounded-lg p-4 border border-slate-200">
            <div class="text-center">
              <div id="timer-display" class="text-3xl font-bold text-emerald-600 mb-4">00:00</div>
              <div class="flex justify-center gap-2">
                <button onclick="startTimer()" class="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg text-sm">Start</button>
                <button onclick="pauseTimer()" class="bg-amber-600 hover:bg-amber-700 text-white px-4 py-2 rounded-lg text-sm">Pause</button>
                <button onclick="resetTimer()" class="bg-slate-600 hover:bg-slate-700 text-white px-4 py-2 rounded-lg text-sm">Reset</button>
              </div>
            </div>
          </div>
        </section>
      </div>

      <!-- Today's Tips -->
      <section class="mt-8 bg-emerald-50 rounded-xl p-6 border border-emerald-200">
        <h2 class="text-2xl font-bold text-emerald-700 mb-4 flex items-center">
          💡 Today's Success Tips
        </h2>
        <ul class="space-y-3">
          {todaysPlan.tips.map(tip => (
            <li class="flex items-start text-emerald-800 font-sans">
              <span class="text-emerald-500 mr-3 mt-1">✓</span>
              <span>{tip}</span>
            </li>
          ))}
        </ul>
      </section>

      <!-- Quick Actions -->
      <section class="mt-8 bg-white rounded-xl shadow-md p-6">
        <h2 class="text-2xl font-bold text-emerald-700 mb-6">🚀 Quick Actions</h2>
        <div class="grid md:grid-cols-4 gap-4">
          <a href="/recipes" class="bg-amber-100 hover:bg-amber-200 text-amber-800 p-4 rounded-lg text-center font-medium transition-colors">
            <div class="text-2xl mb-2">👨‍🍳</div>
            View Recipes
          </a>
          <a href="/shopping-lists" class="bg-blue-100 hover:bg-blue-200 text-blue-800 p-4 rounded-lg text-center font-medium transition-colors">
            <div class="text-2xl mb-2">🛒</div>
            Shopping Lists
          </a>
          <a href="/meal-plan" class="bg-green-100 hover:bg-green-200 text-green-800 p-4 rounded-lg text-center font-medium transition-colors">
            <div class="text-2xl mb-2">📅</div>
            Full Meal Plan
          </a>
          <a href="/exercise-plan" class="bg-red-100 hover:bg-red-200 text-red-800 p-4 rounded-lg text-center font-medium transition-colors">
            <div class="text-2xl mb-2">💪</div>
            Exercise Plan
          </a>
        </div>
      </section>
    )}


    <!-- Print note -->
    <div class="mt-8 text-center text-slate-600 font-sans">
      <p class="text-sm">🖨️ Print this page for a daily reference card!</p>
    </div>
  </main>

  <script>
    import { SimpleUnifiedTracker, saveCurrentTrackingState, loadCurrentTrackingState } from '../utils/simpleUnifiedTracker';

    // Timer functionality
    let timerInterval;
    let seconds = 0;
    let isRunning = false;

    function toggleTimer() {
      const timer = document.getElementById('workout-timer');
      timer?.classList.toggle('hidden');
    }

    function updateDisplay() {
      const display = document.getElementById('timer-display');
      const mins = Math.floor(seconds / 60);
      const secs = seconds % 60;
      if (display) {
        display.textContent = `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
      }
    }

    function startTimer() {
      if (!isRunning) {
        isRunning = true;
        timerInterval = setInterval(() => {
          seconds++;
          updateDisplay();
        }, 1000);
      }
    }

    function pauseTimer() {
      isRunning = false;
      if (timerInterval) {
        clearInterval(timerInterval);
      }
    }

    function resetTimer() {
      pauseTimer();
      seconds = 0;
      updateDisplay();
    }

    // Water tracking
    let waterCount = 0;
    
    function addWater() {
      if (waterCount < 8) {
        waterCount++;
        const display = document.getElementById('water-count');
        if (display) {
          display.textContent = waterCount.toString();
          // Animate the number
          display.style.transform = 'scale(1.5)';
          setTimeout(() => {
            display.style.transform = 'scale(1)';
          }, 300);
        }
        
        // Create water drop animation
        const waterDropsContainer = document.getElementById('water-drops');
        if (waterDropsContainer) {
          const drop = document.createElement('div');
          drop.className = 'water-drop';
          drop.textContent = '💧';
          drop.style.left = Math.random() * 80 + 10 + '%';
          drop.style.bottom = '20px';
          waterDropsContainer.appendChild(drop);
          
          setTimeout(() => drop.remove(), 1000);
        }
        
        // Celebration for reaching goal
        if (waterCount === 8) {
          const statusDiv = document.getElementById('save-status');
          if (statusDiv) {
            statusDiv.innerHTML = '<span class="text-blue-600 font-black">💧 Hydration Goal Reached! 🎆</span>';
            setTimeout(() => {
              statusDiv.innerHTML = '<span class="text-purple-600 font-semibold">Auto-saving your wins! ✨</span>';
            }, 3000);
          }
        }
        
        // Auto-save locally (water count is stored in the tracking data)
        autoSaveLocally();
      }
    }
    
    // Celebration function with localized effect
    function celebrate(checkbox, emoji) {
      // Find the checkbox container
      const container = checkbox.closest('.duo-checkbox-container');
      if (!container) return;
      
      // Create success ripple effect
      const ripple = document.createElement('div');
      ripple.className = 'success-ripple';
      ripple.textContent = emoji;
      container.appendChild(ripple);
      
      // Remove after animation
      setTimeout(() => ripple.remove(), 1000);
      
      // Quick pulse animation on the container
      container.classList.add('celebrate-pulse');
      setTimeout(() => container.classList.remove('celebrate-pulse'), 600);
    }

    // Date and unified storage integration
    let tracker = null;
    let currentDate = new Date();

    // Initialize unified tracker and load existing data
    document.addEventListener('DOMContentLoaded', () => {
      // Initialize tracker
      tracker = new SimpleUnifiedTracker();
      
      // Set up date picker with today's date
      updateDateDisplay();
      
      // Load data for current date
      loadDataForDate();

      // Initial sync status
      const syncStatus = tracker.getSyncStatus();
      if (syncStatus.isConfigured) {
        console.log('Cloud sync is configured and ready');
      }

      // Add event listeners for auto-save and celebrations
      const checkboxes = document.querySelectorAll('.duo-checkbox');
      checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function(e) {
          autoSaveLocally();
          
          // Celebrate when checking (not unchecking)
          if (e.target.checked) {
            const activityType = e.target.dataset.meal || e.target.dataset.activity;
            
            // Different celebration emojis for different activities
            switch(activityType) {
              case 'breakfast':
                celebrate(e.target, '✨');
                break;
              case 'lunch':
                celebrate(e.target, '🎆');
                break;
              case 'dinner':
                celebrate(e.target, '🌟');
                break;
              case 'exercise':
                celebrate(e.target, '🔥');
                break;
              case 'alcohol-free':
                celebrate(e.target, '💪');
                break;
            }
            
            // Check if all daily goals are complete
            checkAllGoalsComplete();
          }
        });
      });
      
      // Add event listener for notes
      const notesField = document.getElementById('daily-notes');
      if (notesField) {
        notesField.addEventListener('blur', autoSaveLocally);
      }
    });
    
    // Check if all daily goals are complete
    function checkAllGoalsComplete() {
      const breakfast = document.getElementById('breakfast-check')?.checked;
      const lunch = document.getElementById('lunch-check')?.checked;
      const dinner = document.getElementById('dinner-check')?.checked;
      const exercise = document.getElementById('exercise-check')?.checked;
      const hydration = waterCount >= 8;
      
      if (breakfast && lunch && dinner && exercise && hydration) {
        // Show perfect day message in status
        const statusDiv = document.getElementById('save-status');
        if (statusDiv) {
          statusDiv.innerHTML = '<span class="text-purple-600 font-black">🏆 PERFECT DAY! All goals crushed! 🏆</span>';
          setTimeout(() => {
            statusDiv.innerHTML = '<span class="text-purple-600 font-semibold">Auto-saving your wins! ✨</span>';
          }, 5000);
        }
      }
    }

    // Date navigation functions
    function changeDate(days) {
      currentDate.setDate(currentDate.getDate() + days);
      updateDateDisplay();
      loadDataForDate();
    }

    function onDateChange() {
      const picker = document.getElementById('date-picker');
      if (picker && picker.value) {
        currentDate = new Date(picker.value + 'T00:00:00');
        updateDateDisplay();
        loadDataForDate();
      }
    }

    function updateDateDisplay() {
      const picker = document.getElementById('date-picker');
      const display = document.getElementById('date-display');
      
      if (picker) {
        picker.value = currentDate.toISOString().split('T')[0];
      }
      
      if (display) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const displayDate = new Date(currentDate);
        displayDate.setHours(0, 0, 0, 0);
        
        const isToday = displayDate.getTime() === today.getTime();
        const isYesterday = displayDate.getTime() === today.getTime() - 24*60*60*1000;
        
        if (isToday) {
          display.textContent = "Today";
        } else if (isYesterday) {
          display.textContent = "Yesterday";
        } else {
          display.textContent = currentDate.toLocaleDateString('en-US', { 
            month: 'short', 
            day: 'numeric',
            year: currentDate.getFullYear() !== today.getFullYear() ? 'numeric' : undefined
          });
        }
      }
    }

    function openDatePicker() {
      const picker = document.getElementById('date-picker');
      if (picker) {
        picker.showPicker();
      }
    }

    async function loadDataForDate() {
      if (!tracker) return;

      // Load data using the unified tracker (syncs from cloud if available)
      await loadCurrentTrackingState(tracker, currentDate);
      
      // Update local water count from what was loaded
      const waterDisplay = document.getElementById('water-count');
      if (waterDisplay) {
        waterCount = parseInt(waterDisplay.textContent || '0');
      }
      
      // Update the save status to show which date we're viewing
      const statusDiv = document.getElementById('save-status');
      if (statusDiv) {
        const dateStr = currentDate.toLocaleDateString('en-US', { 
          month: 'short', 
          day: 'numeric',
          year: currentDate.getFullYear() !== new Date().getFullYear() ? 'numeric' : undefined
        });
        statusDiv.innerHTML = `<span class="text-purple-600 font-semibold">Viewing ${dateStr} ✨</span>`;
      }
    }

    // Auto-save function (saves to local and cloud storage)
    async function autoSaveLocally() {
      if (!tracker) return;
      
      const success = await saveCurrentTrackingState(tracker, currentDate);
      console.log('Auto-saved for', currentDate.toISOString().split('T')[0], ':', success);
    }

    // Sync function
    async function syncNow() {
      if (!tracker) {
        alert('Tracker not initialized. Please refresh the page.');
        return;
      }

      const syncStatus = tracker.getSyncStatus();
      if (!syncStatus.isConfigured) {
        alert('Cloud sync is not configured. Check your JSONBin.io credentials.');
        return;
      }

      const success = await tracker.forceSyncNow();
      if (success) {
        // Status message is handled by the tracker
        console.log('Manual sync completed successfully');
      } else {
        alert('Sync failed. Your data is still saved locally.');
      }
    }

    // Export to CSV function
    function exportToCSV() {
      if (!tracker) {
        alert('Tracker not initialized. Please refresh the page.');
        return;
      }

      const csvContent = tracker.exportToCSV();
      const blob = new Blob([csvContent], { type: 'text/csv' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.style.display = 'none';
      a.href = url;
      a.download = `mediterranean-diet-tracking-${new Date().toISOString().split('T')[0]}.csv`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      const statusDiv = document.getElementById('save-status');
      if (statusDiv) {
        statusDiv.innerHTML = '<span class="text-blue-600">CSV exported! ✓</span>';
        setTimeout(() => {
          statusDiv.innerHTML = '<span class="text-emerald-600">Auto-saving locally ✓</span>';
        }, 3000);
      }
    }

    // Make functions available globally
    window.toggleTimer = toggleTimer;
    window.startTimer = startTimer;
    window.pauseTimer = pauseTimer;
    window.resetTimer = resetTimer;
    window.addWater = addWater;
    window.exportToCSV = exportToCSV;
    window.syncNow = syncNow;
    window.changeDate = changeDate;
    window.onDateChange = onDateChange;
    window.openDatePicker = openDatePicker;
  </script>
</Layout>