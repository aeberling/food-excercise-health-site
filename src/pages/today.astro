---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import { getTodaysPlan, getCurrentWeek } from '../data/dailyPlans';
import { getTodaysQuote } from '../data/quotes';

const todaysPlan = getTodaysPlan();
const currentWeek = getCurrentWeek();
const todaysQuote = getTodaysQuote();
const today = new Date().toLocaleDateString('en-US', { 
  weekday: 'long', 
  year: 'numeric', 
  month: 'long', 
  day: 'numeric' 
});
---

<Layout title="Mediterranean Power Plan - Today's Plan">
  <Navigation />
  
  <main class="max-w-6xl mx-auto px-4 py-8">
    <!-- Header with Date and Quote -->
    <header class="text-center mb-8">
      <div class="bg-gradient-to-r from-emerald-600 to-emerald-700 text-white rounded-xl p-8 shadow-lg mb-6">
        <h1 class="text-4xl font-bold mb-2">Today's Plan</h1>
        <p class="text-xl opacity-90 font-sans">{today}</p>
        <p class="text-lg opacity-80 font-sans mt-2">Week {currentWeek} ‚Ä¢ {todaysPlan?.day}</p>
      </div>
      
      <!-- Daily Quote -->
      <div class="bg-amber-50 border-l-4 border-amber-400 p-6 rounded-r-lg shadow-sm">
        <blockquote class="text-lg italic text-slate-700 mb-2 font-serif">
          "{todaysQuote.text}"
        </blockquote>
        <cite class="text-sm font-medium text-amber-700 font-sans">‚Äî {todaysQuote.author}</cite>
      </div>
    </header>

    <!-- Progress Tracking -->
    <section class="mb-8 bg-slate-50 rounded-xl p-6 border border-slate-200">
      <h2 class="text-2xl font-bold text-slate-700 mb-6">üìä Track Your Day</h2>
      <div class="grid md:grid-cols-3 gap-4">
        <div class="bg-white rounded-lg p-4">
          <h3 class="font-semibold text-slate-700 mb-3">Meals Completed</h3>
          <div class="space-y-2">
            <label class="flex items-center">
              <input type="checkbox" id="breakfast-check" class="mr-2 text-emerald-600" />
              <span class="text-sm">Breakfast</span>
            </label>
            <label class="flex items-center">
              <input type="checkbox" id="lunch-check" class="mr-2 text-emerald-600" />
              <span class="text-sm">Lunch</span>
            </label>
            <label class="flex items-center">
              <input type="checkbox" id="dinner-check" class="mr-2 text-emerald-600" />
              <span class="text-sm">Dinner</span>
            </label>
          </div>
        </div>
        
        <div class="bg-white rounded-lg p-4">
          <h3 class="font-semibold text-slate-700 mb-3">Exercise Completed</h3>
          <label class="flex items-center">
            <input type="checkbox" id="exercise-check" class="mr-2 text-emerald-600" />
            <span class="text-sm">Today's workout</span>
          </label>
        </div>
        
        <div class="bg-white rounded-lg p-4">
          <h3 class="font-semibold text-slate-700 mb-3">Hydration</h3>
          <div class="text-2xl text-center">
            <span id="water-count">0</span> / 8 ü•§
          </div>
          <button onclick="addWater()" class="w-full mt-2 bg-blue-500 hover:bg-blue-600 text-white py-2 rounded text-sm">
            Add Glass
          </button>
        </div>
      </div>
      
      <div class="mt-6 text-center">
        <a href="/progress" class="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-2 rounded-lg font-medium mr-2 inline-block">
          üìä View Progress
        </a>
        <button onclick="exportToCSV()" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-medium">
          üìÑ Export CSV
        </button>
        <div id="save-status" class="mt-2 text-sm text-emerald-600">Auto-saving locally ‚úì</div>
      </div>
    </section>

    {todaysPlan && (
      <div class="grid lg:grid-cols-2 gap-8">
        <!-- Today's Meals -->
        <section class="bg-white rounded-xl shadow-md p-6">
          <h2 class="text-2xl font-bold text-emerald-700 mb-6 flex items-center">
            üçΩÔ∏è Today's Nutrition Plan
          </h2>
          
          <div class="space-y-4">
            <!-- Breakfast -->
            <div class="meal-item bg-amber-50 rounded-lg p-4 border border-amber-200">
              <div class="flex justify-between items-start mb-2">
                <h3 class="text-lg font-semibold text-amber-800">Breakfast</h3>
                <span class="bg-amber-600 text-white text-sm px-2 py-1 rounded-full">{todaysPlan.breakfast.protein}</span>
              </div>
              {todaysPlan.breakfast.recipeId ? (
                <a href={`/recipes#${todaysPlan.breakfast.recipeId}`} class="text-amber-700 hover:text-amber-800 underline font-medium">
                  {todaysPlan.breakfast.name}
                </a>
              ) : (
                <p class="text-amber-700 font-medium">{todaysPlan.breakfast.name}</p>
              )}
            </div>

            <!-- Lunch -->
            <div class="meal-item bg-emerald-50 rounded-lg p-4 border border-emerald-200">
              <div class="flex justify-between items-start mb-2">
                <h3 class="text-lg font-semibold text-emerald-800">Lunch</h3>
                <span class="bg-emerald-600 text-white text-sm px-2 py-1 rounded-full">{todaysPlan.lunch.protein}</span>
              </div>
              {todaysPlan.lunch.recipeId ? (
                <a href={`/recipes#${todaysPlan.lunch.recipeId}`} class="text-emerald-700 hover:text-emerald-800 underline font-medium">
                  {todaysPlan.lunch.name}
                </a>
              ) : (
                <p class="text-emerald-700 font-medium">{todaysPlan.lunch.name}</p>
              )}
            </div>

            <!-- Dinner -->
            <div class="meal-item bg-blue-50 rounded-lg p-4 border border-blue-200">
              <div class="flex justify-between items-start mb-2">
                <h3 class="text-lg font-semibold text-blue-800">Dinner</h3>
                <span class="bg-blue-600 text-white text-sm px-2 py-1 rounded-full">{todaysPlan.dinner.protein}</span>
              </div>
              {todaysPlan.dinner.recipeId ? (
                <a href={`/recipes#${todaysPlan.dinner.recipeId}`} class="text-blue-700 hover:text-blue-800 underline font-medium">
                  {todaysPlan.dinner.name}
                </a>
              ) : (
                <p class="text-blue-700 font-medium">{todaysPlan.dinner.name}</p>
              )}
            </div>
          </div>

          <!-- Daily Protein Total -->
          <div class="mt-6 bg-slate-50 rounded-lg p-4 border border-slate-200">
            <div class="flex justify-between items-center">
              <span class="text-slate-700 font-semibold">Daily Protein Target:</span>
              <span class="text-2xl font-bold text-emerald-600">{todaysPlan.totalProtein}</span>
            </div>
          </div>
        </section>

        <!-- Today's Exercise -->
        <section class="bg-white rounded-xl shadow-md p-6">
          <h2 class="text-2xl font-bold text-emerald-700 mb-6 flex items-center">
            üí™ Today's Training
          </h2>
          
          <div class="exercise-card bg-gradient-to-r from-red-50 to-orange-50 rounded-lg p-6 border border-red-200">
            <div class="flex justify-between items-start mb-4">
              <h3 class="text-xl font-bold text-red-800">{todaysPlan.exercise.name}</h3>
              <div class="text-right">
                <div class="text-sm text-red-600 font-medium">{todaysPlan.exercise.duration}</div>
                <div class="text-xs text-red-500">{todaysPlan.exercise.intensity} Intensity</div>
              </div>
            </div>
            
            <p class="text-red-700 mb-4 font-sans">{todaysPlan.exercise.description}</p>
            
            <div class="flex gap-2">
              <a href="/exercise-plan" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                View Full Workout
              </a>
              <button onclick="toggleTimer()" class="bg-white hover:bg-red-50 text-red-600 border border-red-600 px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                Start Timer
              </button>
            </div>
          </div>

          <!-- Quick Timer (hidden by default) -->
          <div id="workout-timer" class="hidden mt-4 bg-slate-50 rounded-lg p-4 border border-slate-200">
            <div class="text-center">
              <div id="timer-display" class="text-3xl font-bold text-emerald-600 mb-4">00:00</div>
              <div class="flex justify-center gap-2">
                <button onclick="startTimer()" class="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg text-sm">Start</button>
                <button onclick="pauseTimer()" class="bg-amber-600 hover:bg-amber-700 text-white px-4 py-2 rounded-lg text-sm">Pause</button>
                <button onclick="resetTimer()" class="bg-slate-600 hover:bg-slate-700 text-white px-4 py-2 rounded-lg text-sm">Reset</button>
              </div>
            </div>
          </div>
        </section>
      </div>

      <!-- Today's Tips -->
      <section class="mt-8 bg-emerald-50 rounded-xl p-6 border border-emerald-200">
        <h2 class="text-2xl font-bold text-emerald-700 mb-4 flex items-center">
          üí° Today's Success Tips
        </h2>
        <ul class="space-y-3">
          {todaysPlan.tips.map(tip => (
            <li class="flex items-start text-emerald-800 font-sans">
              <span class="text-emerald-500 mr-3 mt-1">‚úì</span>
              <span>{tip}</span>
            </li>
          ))}
        </ul>
      </section>

      <!-- Quick Actions -->
      <section class="mt-8 bg-white rounded-xl shadow-md p-6">
        <h2 class="text-2xl font-bold text-emerald-700 mb-6">üöÄ Quick Actions</h2>
        <div class="grid md:grid-cols-4 gap-4">
          <a href="/recipes" class="bg-amber-100 hover:bg-amber-200 text-amber-800 p-4 rounded-lg text-center font-medium transition-colors">
            <div class="text-2xl mb-2">üë®‚Äçüç≥</div>
            View Recipes
          </a>
          <a href="/shopping-lists" class="bg-blue-100 hover:bg-blue-200 text-blue-800 p-4 rounded-lg text-center font-medium transition-colors">
            <div class="text-2xl mb-2">üõí</div>
            Shopping Lists
          </a>
          <a href="/meal-plan" class="bg-green-100 hover:bg-green-200 text-green-800 p-4 rounded-lg text-center font-medium transition-colors">
            <div class="text-2xl mb-2">üìÖ</div>
            Full Meal Plan
          </a>
          <a href="/exercise-plan" class="bg-red-100 hover:bg-red-200 text-red-800 p-4 rounded-lg text-center font-medium transition-colors">
            <div class="text-2xl mb-2">üí™</div>
            Exercise Plan
          </a>
        </div>
      </section>
    )}


    <!-- Print note -->
    <div class="mt-8 text-center text-slate-600 font-sans">
      <p class="text-sm">üñ®Ô∏è Print this page for a daily reference card!</p>
    </div>
  </main>

  <script>
    import { LocalTracker, saveCurrentTrackingState, loadCurrentTrackingState } from '../utils/localTracker';

    // Timer functionality
    let timerInterval;
    let seconds = 0;
    let isRunning = false;

    function toggleTimer() {
      const timer = document.getElementById('workout-timer');
      timer?.classList.toggle('hidden');
    }

    function updateDisplay() {
      const display = document.getElementById('timer-display');
      const mins = Math.floor(seconds / 60);
      const secs = seconds % 60;
      if (display) {
        display.textContent = `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
      }
    }

    function startTimer() {
      if (!isRunning) {
        isRunning = true;
        timerInterval = setInterval(() => {
          seconds++;
          updateDisplay();
        }, 1000);
      }
    }

    function pauseTimer() {
      isRunning = false;
      if (timerInterval) {
        clearInterval(timerInterval);
      }
    }

    function resetTimer() {
      pauseTimer();
      seconds = 0;
      updateDisplay();
    }

    // Water tracking
    let waterCount = 0;
    
    function addWater() {
      if (waterCount < 8) {
        waterCount++;
        const display = document.getElementById('water-count');
        if (display) {
          display.textContent = waterCount.toString();
        }
        // Store in localStorage
        localStorage.setItem('waterCount', waterCount.toString());
        // Auto-save locally
        autoSaveLocally();
      }
    }

    // Local storage integration
    let tracker = null;

    // Initialize local tracker and load existing data
    document.addEventListener('DOMContentLoaded', () => {
      // Initialize tracker
      tracker = new LocalTracker();
      
      // Load water count from localStorage
      const saved = localStorage.getItem('waterCount');
      if (saved) {
        waterCount = parseInt(saved);
        const display = document.getElementById('water-count');
        if (display) {
          display.textContent = waterCount.toString();
        }
      }

      // Load existing tracking data from local storage
      loadCurrentTrackingState();

      // Add event listeners for auto-save
      const checkboxes = document.querySelectorAll('#breakfast-check, #lunch-check, #dinner-check, #exercise-check');
      checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', autoSaveLocally);
      });
    });

    // Auto-save function
    function autoSaveLocally() {
      if (!tracker) return;
      
      const success = saveCurrentTrackingState();
      console.log('Auto-saved locally:', success);
    }

    // Export to CSV function
    function exportToCSV() {
      if (!tracker) {
        alert('Tracker not initialized. Please refresh the page.');
        return;
      }

      tracker.downloadCSV();
      
      const statusDiv = document.getElementById('save-status');
      if (statusDiv) {
        statusDiv.textContent = 'CSV exported! ‚úì';
        statusDiv.className = 'mt-2 text-sm text-blue-600';
        setTimeout(() => {
          statusDiv.textContent = 'Auto-saving locally ‚úì';
          statusDiv.className = 'mt-2 text-sm text-emerald-600';
        }, 3000);
      }
    }

    // Make functions available globally
    window.toggleTimer = toggleTimer;
    window.startTimer = startTimer;
    window.pauseTimer = pauseTimer;
    window.resetTimer = resetTimer;
    window.addWater = addWater;
    window.exportToCSV = exportToCSV;
  </script>
</Layout>